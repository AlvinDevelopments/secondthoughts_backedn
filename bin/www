#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('secondthoughts-backend:server');
var http = require('http');

const socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Create Socket.io Server 
 * 
 */

 const io = socketIO(server);

 let users = [];

 io.on('connection', socket=>{
  console.log('A User has connected.');

  socket.on('user',(user)=>{
    console.log(user.userId);
    socket.join(user.userId);
    users.push({
        id: user.userId,
        userName: user.userName
      });
    });


  socket.on('favorite created', (data)=>{
    console.log('faved!!');
    console.log(`${data}'s post has been favorited`);
    socket.to(data).emit('new notification',)
  });

  socket.on('disconnect',()=>{
    console.log('the User has disconnected');
    for(let i=0; i < users.length; i++){
		        	
      if(users[i].id === socket.id){
          users.splice(i,1); 
      }
    }

  });
 });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
